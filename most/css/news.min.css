@import url(https://fonts.googleapis.com/css?family=Montserrat:100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic);.news{padding:0}.news-all{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.news-all__title{padding-top:50px;margin-bottom:100px;font-weight:700;font-size:60px;line-height:73px;text-align:center;letter-spacing:.1em;color:#fff}.news-all__main,.news-all__main .main-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex}.news-all__main{background:#fff;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding:50px 100px 100px;width:100%}.news-all__main .main-wrapper{-ms-flex-pack:distribute;justify-content:space-around;margin-bottom:20px}.news-all__main .main-wrapper:last-child{margin-bottom:0}.news-all__main .main-wrapper__blog{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding:40px;max-width:347px}.news-all__main .main-wrapper__blog .date{font-weight:500;font-size:14px;line-height:17px;color:#cecece;margin-bottom:5px}.news-all__main .main-wrapper__blog a .title{font-weight:700;font-size:28px;line-height:34px;color:#1a1a18;margin-bottom:5px}.news-all__main .main-wrapper__blog a .title:hover{text-decoration:underline}.news-all__main .main-wrapper__blog .subtitle{font-weight:400;font-size:16px;line-height:20px;color:#1a1a18}.news-all__pages{padding:100px}.news-all__pages ul{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:1080px;padding:0 61px}.news-all__pages ul li:last-child a:hover{background:0 0;color:#7c7c7c}.news-all__pages ul li a{font-weight:400;font-size:18px;line-height:170%;color:#fff;padding:10px;border-radius:50px;width:40px;height:40px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:0 0}.news-all__pages ul li a:hover{background:#373736}@media (max-width:1024.98px){.news .news-all__main{padding:50px 25px 25px}.news .news-all__main .main-wrapper{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.news .news-all__main .main-wrapper__blog{width:100%;max-width:500px;padding:30px}.news .news-all__pages{width:100%}.news .news-all__pages ul{padding:0;width:100%}.news .news-all__pages ul li a{font-size:16px}}@media (max-width:767.98px){.news .news-all__main{padding:50px 25px 25px}.news .news-all__main .main-wrapper{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.news .news-all__main .main-wrapper__blog{width:100%;max-width:500px;padding:40px}.news .news-all__pages{width:100%;padding:100px 25px}.news .news-all__pages ul{padding:0;width:100%}.news .news-all__pages ul li a{font-size:16px}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */